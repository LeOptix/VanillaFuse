<!--esto es un comentario-->

<vanillafuse client="win"> <!--client define si exportaremos a windows o linux-->
    <def-data> <!--el equivalente al "head" en HTMl, define los metadatos de la app-->
        <data type="title" value="VanillaFuse Compiler"/> <!--el value debería tener un ejemplo predefinido, como "Sample title", en caso de que sea necesario definirla y no se haya hecho-->
        <data type="favicon" value="brand/favicon.ico"/> <!--el icono de la ventana y del acceso directo-->
        <data type="desc" value="El compilador oficial de VanillaFuse"/> <!--descripcion-->
        <data type="ver" value="1.0.1"/> <!--la version. tiene que ser de dos o tres numeros (1.0, o 1.0.0)-->
        <data type="author" value="Swiftly Team"/>  <!--el autor del programa-->
        <data type="filename" value="VanillaFuse Compiler"/> <!--el nombre del archivo .exe o lo que sea, si no se define, se usará el titulo y el numero de version (luciria asi: Sample Title [1.0.0])-->
        <data type="minreqs"> <!--define los requisitos minimos. es opcional. luego podemos programar ciertas acciones segun el hardware del usuario. el valor es libre y no depende del programa (puedes establecer el minimo en 2gb de espacio aunque el programa pese 6, eso depende de ti)-->
            ram: "1GB"
            storage: "6GB" <!--puedes definir solo alguna cosa, como espacio y ram, o definir cosas muy especificas-->
            cpu-arch: "x86"
            os: "win7" <!--o un SO minimo, haciendolo funcionar solo en ese o posteriores. añade un ! (!win7) para que solo vaya en dicho SO-->
        </data>
        <data type="release-date" value="12-11-2023"/> <!--define la fecha de lanzamiento original. aprovecho a decir que la fecha siempre se pondrá en DD-MM-YYYY-->
        <data type="contact">
            mail: "support@swiftly.com"
            phone: "+34 611 11 11 11"
        </data> <!--info de contacto (he puesto datos de ejemplo, no reales)-->
    </def-data>
    <vars> <!--define variables globales que puedes usar a lo largo de los archivos-->
        <var type="text" value="Hello world"/> <!--un texto-->
        <var type="path" value="/pages/index.vfuse"/> <!--una ruta a un archivo-->
    </vars>
    <handler> <!--el handler indica que hacer si el programa falla por diversas razones. cada case es una razon-->
        <case id="crash"> <!--el programa cierra inesperadamente-->
            <modal class="crash-modal"> <!--crea un modal, como en HTML. además, las classes funcionan igual, son para referirse a algo al estilizar-->
                <modaltitle>¡Ups! Algó salió mal</modaltitle>
                <modaltext>No sabemos que pasó.</modaltext>
                <modaltext content="echo(event.ErrorCode)"></modaltext> <!--el content indica el contenido del texto, si se va a usar un valor. echo imprimirá algo generado por el programa, event se refiere al evento relacionado a dicho modal (el crash) y el error code es el codigo asociado a ese error-->
            </modal>
            <!--por defecto, si pones un modal en un case, este aparecerá automáticamente al producirse dicho case. si no añades botones, se añadirá un botón estandar para cerrar el programa-->
        </case>
    </handler>
</vanillafuse>